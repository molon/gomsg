// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/molon/gomsg/internal/pb/stationpb/station.proto

/*
Package stationpb is a generated protocol buffer package.

It is generated from these files:
	github.com/molon/gomsg/internal/pb/stationpb/station.proto

It has these top-level messages:
	ConnectRequest
	ConnectResponse
	DisconnectRequest
*/
package stationpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ConnectRequest struct {
	// boat服务ID
	BoatId string `protobuf:"bytes,1,opt,name=boat_id,json=boatId" json:"boat_id,omitempty"`
	// 会话ID
	Sid string `protobuf:"bytes,2,opt,name=sid" json:"sid,omitempty"`
}

func (m *ConnectRequest) Reset()                    { *m = ConnectRequest{} }
func (m *ConnectRequest) String() string            { return proto.CompactTextString(m) }
func (*ConnectRequest) ProtoMessage()               {}
func (*ConnectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ConnectRequest) GetBoatId() string {
	if m != nil {
		return m.BoatId
	}
	return ""
}

func (m *ConnectRequest) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

type ConnectResponse struct {
	// 用户ID
	Uid string `protobuf:"bytes,1,opt,name=uid" json:"uid,omitempty"`
	// 平台名称
	Platform string `protobuf:"bytes,2,opt,name=platform" json:"platform,omitempty"`
}

func (m *ConnectResponse) Reset()                    { *m = ConnectResponse{} }
func (m *ConnectResponse) String() string            { return proto.CompactTextString(m) }
func (*ConnectResponse) ProtoMessage()               {}
func (*ConnectResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ConnectResponse) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *ConnectResponse) GetPlatform() string {
	if m != nil {
		return m.Platform
	}
	return ""
}

type DisconnectRequest struct {
	// boat服务ID
	BoatId string `protobuf:"bytes,1,opt,name=boat_id,json=boatId" json:"boat_id,omitempty"`
	// 会话ID
	Sid string `protobuf:"bytes,2,opt,name=sid" json:"sid,omitempty"`
	// 用户ID
	Uid string `protobuf:"bytes,3,opt,name=uid" json:"uid,omitempty"`
}

func (m *DisconnectRequest) Reset()                    { *m = DisconnectRequest{} }
func (m *DisconnectRequest) String() string            { return proto.CompactTextString(m) }
func (*DisconnectRequest) ProtoMessage()               {}
func (*DisconnectRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *DisconnectRequest) GetBoatId() string {
	if m != nil {
		return m.BoatId
	}
	return ""
}

func (m *DisconnectRequest) GetSid() string {
	if m != nil {
		return m.Sid
	}
	return ""
}

func (m *DisconnectRequest) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func init() {
	proto.RegisterType((*ConnectRequest)(nil), "stationpb.ConnectRequest")
	proto.RegisterType((*ConnectResponse)(nil), "stationpb.ConnectResponse")
	proto.RegisterType((*DisconnectRequest)(nil), "stationpb.DisconnectRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Station service

type StationClient interface {
	// boat服务在新会话进入后应该调用此方法
	// 内部根据鉴权信息得到身份信息且记录连接信息，最终返回身份信息
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error)
	// boat服务在新会话断开之后应该调用此方法
	// 内部会删除对应连接信息
	Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type stationClient struct {
	cc *grpc.ClientConn
}

func NewStationClient(cc *grpc.ClientConn) StationClient {
	return &stationClient{cc}
}

func (c *stationClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (*ConnectResponse, error) {
	out := new(ConnectResponse)
	err := grpc.Invoke(ctx, "/stationpb.Station/Connect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *stationClient) Disconnect(ctx context.Context, in *DisconnectRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/stationpb.Station/Disconnect", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Station service

type StationServer interface {
	// boat服务在新会话进入后应该调用此方法
	// 内部根据鉴权信息得到身份信息且记录连接信息，最终返回身份信息
	Connect(context.Context, *ConnectRequest) (*ConnectResponse, error)
	// boat服务在新会话断开之后应该调用此方法
	// 内部会删除对应连接信息
	Disconnect(context.Context, *DisconnectRequest) (*google_protobuf.Empty, error)
}

func RegisterStationServer(s *grpc.Server, srv StationServer) {
	s.RegisterService(&_Station_serviceDesc, srv)
}

func _Station_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stationpb.Station/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServer).Connect(ctx, req.(*ConnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Station_Disconnect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DisconnectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StationServer).Disconnect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stationpb.Station/Disconnect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StationServer).Disconnect(ctx, req.(*DisconnectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Station_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stationpb.Station",
	HandlerType: (*StationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Connect",
			Handler:    _Station_Connect_Handler,
		},
		{
			MethodName: "Disconnect",
			Handler:    _Station_Disconnect_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/molon/gomsg/internal/pb/stationpb/station.proto",
}

func init() {
	proto.RegisterFile("github.com/molon/gomsg/internal/pb/stationpb/station.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x51, 0x3f, 0x4f, 0xfb, 0x30,
	0x10, 0x6d, 0x7e, 0x95, 0x9a, 0x5f, 0x6f, 0xe0, 0x8f, 0x07, 0x28, 0x81, 0x01, 0x65, 0x62, 0x40,
	0xb6, 0x04, 0x1b, 0x0c, 0x48, 0xa5, 0x0c, 0x6c, 0xa8, 0x6c, 0x2c, 0x28, 0x7f, 0x5c, 0x63, 0x29,
	0xf6, 0x99, 0xf8, 0x32, 0xf0, 0x39, 0xf8, 0xc2, 0xc8, 0x49, 0xeb, 0x82, 0x60, 0x81, 0xed, 0x2e,
	0xef, 0xbd, 0xdc, 0x7b, 0xcf, 0x70, 0xa5, 0x34, 0xbd, 0x74, 0x25, 0xaf, 0xd0, 0x08, 0x83, 0x0d,
	0x5a, 0xa1, 0xd0, 0x78, 0x25, 0xb4, 0x25, 0xd9, 0xda, 0xa2, 0x11, 0xae, 0x14, 0x9e, 0x0a, 0xd2,
	0x68, 0xb7, 0x13, 0x77, 0x2d, 0x12, 0xb2, 0x69, 0x04, 0xb2, 0x63, 0x85, 0xa8, 0x1a, 0x29, 0x7a,
	0xa0, 0xec, 0x56, 0x42, 0x1a, 0x47, 0x6f, 0x03, 0x2f, 0xbf, 0x86, 0x9d, 0x5b, 0xb4, 0x56, 0x56,
	0xb4, 0x94, 0xaf, 0x9d, 0xf4, 0xc4, 0x0e, 0x21, 0x2d, 0xb1, 0xa0, 0x67, 0x5d, 0xcf, 0x92, 0xd3,
	0xe4, 0x6c, 0xba, 0x9c, 0x84, 0xf5, 0xbe, 0x66, 0x7b, 0x30, 0xf6, 0xba, 0x9e, 0xfd, 0xeb, 0x3f,
	0x86, 0x31, 0xbf, 0x81, 0xdd, 0x28, 0xf6, 0x0e, 0xad, 0x97, 0x81, 0xd4, 0x45, 0x65, 0x18, 0x59,
	0x06, 0xff, 0x5d, 0x53, 0xd0, 0x0a, 0x5b, 0xb3, 0xd6, 0xc6, 0x3d, 0x7f, 0x80, 0xfd, 0x85, 0xf6,
	0xd5, 0x5f, 0x0d, 0x6c, 0xae, 0x8d, 0xe3, 0xb5, 0x8b, 0xf7, 0x04, 0xd2, 0xc7, 0x21, 0x3a, 0x9b,
	0x43, 0xba, 0xb6, 0xc7, 0x8e, 0x78, 0xec, 0x83, 0x7f, 0xcd, 0x9b, 0x65, 0x3f, 0x41, 0x43, 0x9a,
	0x7c, 0xc4, 0x16, 0x00, 0x5b, 0x87, 0xec, 0xe4, 0x13, 0xf7, 0x9b, 0xf1, 0xec, 0x80, 0x0f, 0x4d,
	0xf3, 0x4d, 0xd3, 0xfc, 0x2e, 0x34, 0x9d, 0x8f, 0xe6, 0xfc, 0xe9, 0xfc, 0x37, 0x6f, 0x59, 0x4e,
	0xfa, 0x3f, 0x5c, 0x7e, 0x04, 0x00, 0x00, 0xff, 0xff, 0x0e, 0x58, 0x77, 0xbb, 0x02, 0x02, 0x00,
	0x00,
}
