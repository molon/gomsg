// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/molon/gomsg/pb/msgpb/msg.proto

/*
Package msgpb is a generated protocol buffer package.

It is generated from these files:
	github.com/molon/gomsg/pb/msgpb/msg.proto

It has these top-level messages:
	Ack
	Ping
	Pong
	SubRoomRequest
	CommonResponse
	ClientPayload
	ServerPayload
	Message
	MessagesWrapper
*/
package msgpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/any"
import errorpb "github.com/molon/gomsg/pb/errorpb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 消息选项
type MessageOption int32

const (
	MessageOption_NONE MessageOption = 0
	// 1 << 0 需要客户端ack的
	MessageOption_NEED_ACK MessageOption = 1
	// 1 << 1 客户端不在线则需要存储为离线消息的
	MessageOption_NEED_OFFLINE MessageOption = 2
	// 1 << 2 客户端不在线则需要投递通知的 (例如apns)
	MessageOption_NEED_NOTIFICATION MessageOption = 4
)

var MessageOption_name = map[int32]string{
	0: "NONE",
	1: "NEED_ACK",
	2: "NEED_OFFLINE",
	4: "NEED_NOTIFICATION",
}
var MessageOption_value = map[string]int32{
	"NONE":              0,
	"NEED_ACK":          1,
	"NEED_OFFLINE":      2,
	"NEED_NOTIFICATION": 4,
}

func (x MessageOption) String() string {
	return proto.EnumName(MessageOption_name, int32(x))
}
func (MessageOption) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Ack反馈消息
type Ack struct {
	Seq string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
}

func (m *Ack) Reset()                    { *m = Ack{} }
func (m *Ack) String() string            { return proto.CompactTextString(m) }
func (*Ack) ProtoMessage()               {}
func (*Ack) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Ack) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

// 心跳，这个是由于一些语言的gRPC skd不支持客户端的keepalive
// 所以客户端检测服务端存活就需要自行ping，服务端这里简单的返回pong而已
type Ping struct {
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (m *Ping) String() string            { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Pong struct {
	Code errorpb.Code `protobuf:"varint,1,opt,name=code,enum=errorpb.Code" json:"code,omitempty"`
	Msg  string       `protobuf:"bytes,2,opt,name=msg" json:"msg,omitempty"`
}

func (m *Pong) Reset()                    { *m = Pong{} }
func (m *Pong) String() string            { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()               {}
func (*Pong) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Pong) GetCode() errorpb.Code {
	if m != nil {
		return m.Code
	}
	return errorpb.Code_NONE
}

func (m *Pong) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// 会话需要订阅某房间的业务逻辑时需要发送此消息
type SubRoomRequest struct {
	Room   string               `protobuf:"bytes,1,opt,name=room" json:"room,omitempty"`
	Params *google_protobuf.Any `protobuf:"bytes,2,opt,name=params" json:"params,omitempty"`
}

func (m *SubRoomRequest) Reset()                    { *m = SubRoomRequest{} }
func (m *SubRoomRequest) String() string            { return proto.CompactTextString(m) }
func (*SubRoomRequest) ProtoMessage()               {}
func (*SubRoomRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SubRoomRequest) GetRoom() string {
	if m != nil {
		return m.Room
	}
	return ""
}

func (m *SubRoomRequest) GetParams() *google_protobuf.Any {
	if m != nil {
		return m.Params
	}
	return nil
}

// 通用反馈，跟对一些后缀为Request的使用
type CommonResponse struct {
	Seq  string       `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	Code errorpb.Code `protobuf:"varint,2,opt,name=code,enum=errorpb.Code" json:"code,omitempty"`
	Msg  string       `protobuf:"bytes,3,opt,name=msg" json:"msg,omitempty"`
}

func (m *CommonResponse) Reset()                    { *m = CommonResponse{} }
func (m *CommonResponse) String() string            { return proto.CompactTextString(m) }
func (*CommonResponse) ProtoMessage()               {}
func (*CommonResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *CommonResponse) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *CommonResponse) GetCode() errorpb.Code {
	if m != nil {
		return m.Code
	}
	return errorpb.Code_NONE
}

func (m *CommonResponse) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// 客户端发送给loop端
type ClientPayload struct {
	// 唯一标识，由客户端生成，一般仅留作ack或者resp使用
	Seq string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	// Types that are valid to be assigned to Body:
	//	*ClientPayload_Ack
	//	*ClientPayload_Ping
	//	*ClientPayload_Sub
	Body isClientPayload_Body `protobuf_oneof:"Body"`
}

func (m *ClientPayload) Reset()                    { *m = ClientPayload{} }
func (m *ClientPayload) String() string            { return proto.CompactTextString(m) }
func (*ClientPayload) ProtoMessage()               {}
func (*ClientPayload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type isClientPayload_Body interface{ isClientPayload_Body() }

type ClientPayload_Ack struct {
	Ack *Ack `protobuf:"bytes,11,opt,name=ack,oneof"`
}
type ClientPayload_Ping struct {
	Ping *Ping `protobuf:"bytes,12,opt,name=ping,oneof"`
}
type ClientPayload_Sub struct {
	Sub *SubRoomRequest `protobuf:"bytes,13,opt,name=sub,oneof"`
}

func (*ClientPayload_Ack) isClientPayload_Body()  {}
func (*ClientPayload_Ping) isClientPayload_Body() {}
func (*ClientPayload_Sub) isClientPayload_Body()  {}

func (m *ClientPayload) GetBody() isClientPayload_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *ClientPayload) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *ClientPayload) GetAck() *Ack {
	if x, ok := m.GetBody().(*ClientPayload_Ack); ok {
		return x.Ack
	}
	return nil
}

func (m *ClientPayload) GetPing() *Ping {
	if x, ok := m.GetBody().(*ClientPayload_Ping); ok {
		return x.Ping
	}
	return nil
}

func (m *ClientPayload) GetSub() *SubRoomRequest {
	if x, ok := m.GetBody().(*ClientPayload_Sub); ok {
		return x.Sub
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ClientPayload) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ClientPayload_OneofMarshaler, _ClientPayload_OneofUnmarshaler, _ClientPayload_OneofSizer, []interface{}{
		(*ClientPayload_Ack)(nil),
		(*ClientPayload_Ping)(nil),
		(*ClientPayload_Sub)(nil),
	}
}

func _ClientPayload_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ClientPayload)
	// Body
	switch x := m.Body.(type) {
	case *ClientPayload_Ack:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ack); err != nil {
			return err
		}
	case *ClientPayload_Ping:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Ping); err != nil {
			return err
		}
	case *ClientPayload_Sub:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Sub); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ClientPayload.Body has unexpected type %T", x)
	}
	return nil
}

func _ClientPayload_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ClientPayload)
	switch tag {
	case 11: // Body.ack
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Ack)
		err := b.DecodeMessage(msg)
		m.Body = &ClientPayload_Ack{msg}
		return true, err
	case 12: // Body.ping
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Ping)
		err := b.DecodeMessage(msg)
		m.Body = &ClientPayload_Ping{msg}
		return true, err
	case 13: // Body.sub
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SubRoomRequest)
		err := b.DecodeMessage(msg)
		m.Body = &ClientPayload_Sub{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ClientPayload_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ClientPayload)
	// Body
	switch x := m.Body.(type) {
	case *ClientPayload_Ack:
		s := proto.Size(x.Ack)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientPayload_Ping:
		s := proto.Size(x.Ping)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ClientPayload_Sub:
		s := proto.Size(x.Sub)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// loop端发送给客户端(实为N个业务消息组成)
type ServerPayload struct {
	// 唯一标识，由loop端内部生成，一般仅留作ack或者resp使用
	Seq string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	// 是否需要ack
	NeedAck bool `protobuf:"varint,2,opt,name=need_ack,json=needAck" json:"need_ack,omitempty"`
	// Types that are valid to be assigned to Body:
	//	*ServerPayload_Pong
	//	*ServerPayload_MsgsWrapper
	//	*ServerPayload_SubResp
	Body isServerPayload_Body `protobuf_oneof:"Body"`
}

func (m *ServerPayload) Reset()                    { *m = ServerPayload{} }
func (m *ServerPayload) String() string            { return proto.CompactTextString(m) }
func (*ServerPayload) ProtoMessage()               {}
func (*ServerPayload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type isServerPayload_Body interface{ isServerPayload_Body() }

type ServerPayload_Pong struct {
	Pong *Pong `protobuf:"bytes,11,opt,name=pong,oneof"`
}
type ServerPayload_MsgsWrapper struct {
	MsgsWrapper *MessagesWrapper `protobuf:"bytes,12,opt,name=msgs_wrapper,json=msgsWrapper,oneof"`
}
type ServerPayload_SubResp struct {
	SubResp *CommonResponse `protobuf:"bytes,13,opt,name=sub_resp,json=subResp,oneof"`
}

func (*ServerPayload_Pong) isServerPayload_Body()        {}
func (*ServerPayload_MsgsWrapper) isServerPayload_Body() {}
func (*ServerPayload_SubResp) isServerPayload_Body()     {}

func (m *ServerPayload) GetBody() isServerPayload_Body {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *ServerPayload) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *ServerPayload) GetNeedAck() bool {
	if m != nil {
		return m.NeedAck
	}
	return false
}

func (m *ServerPayload) GetPong() *Pong {
	if x, ok := m.GetBody().(*ServerPayload_Pong); ok {
		return x.Pong
	}
	return nil
}

func (m *ServerPayload) GetMsgsWrapper() *MessagesWrapper {
	if x, ok := m.GetBody().(*ServerPayload_MsgsWrapper); ok {
		return x.MsgsWrapper
	}
	return nil
}

func (m *ServerPayload) GetSubResp() *CommonResponse {
	if x, ok := m.GetBody().(*ServerPayload_SubResp); ok {
		return x.SubResp
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*ServerPayload) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _ServerPayload_OneofMarshaler, _ServerPayload_OneofUnmarshaler, _ServerPayload_OneofSizer, []interface{}{
		(*ServerPayload_Pong)(nil),
		(*ServerPayload_MsgsWrapper)(nil),
		(*ServerPayload_SubResp)(nil),
	}
}

func _ServerPayload_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*ServerPayload)
	// Body
	switch x := m.Body.(type) {
	case *ServerPayload_Pong:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Pong); err != nil {
			return err
		}
	case *ServerPayload_MsgsWrapper:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MsgsWrapper); err != nil {
			return err
		}
	case *ServerPayload_SubResp:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SubResp); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("ServerPayload.Body has unexpected type %T", x)
	}
	return nil
}

func _ServerPayload_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*ServerPayload)
	switch tag {
	case 11: // Body.pong
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Pong)
		err := b.DecodeMessage(msg)
		m.Body = &ServerPayload_Pong{msg}
		return true, err
	case 12: // Body.msgs_wrapper
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MessagesWrapper)
		err := b.DecodeMessage(msg)
		m.Body = &ServerPayload_MsgsWrapper{msg}
		return true, err
	case 13: // Body.sub_resp
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CommonResponse)
		err := b.DecodeMessage(msg)
		m.Body = &ServerPayload_SubResp{msg}
		return true, err
	default:
		return false, nil
	}
}

func _ServerPayload_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*ServerPayload)
	// Body
	switch x := m.Body.(type) {
	case *ServerPayload_Pong:
		s := proto.Size(x.Pong)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServerPayload_MsgsWrapper:
		s := proto.Size(x.MsgsWrapper)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *ServerPayload_SubResp:
		s := proto.Size(x.SubResp)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// 消息
type Message struct {
	// 消息唯一标识，一般由station端分发时生成，客户端去重使用以及离线消息存储的依据
	Seq string `protobuf:"bytes,1,opt,name=seq" json:"seq,omitempty"`
	// 选项
	Options MessageOption `protobuf:"varint,2,opt,name=options,enum=msgpb.MessageOption" json:"options,omitempty"`
	// 消息体
	Body *google_protobuf.Any `protobuf:"bytes,3,opt,name=body" json:"body,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Message) GetSeq() string {
	if m != nil {
		return m.Seq
	}
	return ""
}

func (m *Message) GetOptions() MessageOption {
	if m != nil {
		return m.Options
	}
	return MessageOption_NONE
}

func (m *Message) GetBody() *google_protobuf.Any {
	if m != nil {
		return m.Body
	}
	return nil
}

// 消息列表wrapper
type MessagesWrapper struct {
	Msgs []*Message `protobuf:"bytes,1,rep,name=msgs" json:"msgs,omitempty"`
}

func (m *MessagesWrapper) Reset()                    { *m = MessagesWrapper{} }
func (m *MessagesWrapper) String() string            { return proto.CompactTextString(m) }
func (*MessagesWrapper) ProtoMessage()               {}
func (*MessagesWrapper) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *MessagesWrapper) GetMsgs() []*Message {
	if m != nil {
		return m.Msgs
	}
	return nil
}

func init() {
	proto.RegisterType((*Ack)(nil), "msgpb.Ack")
	proto.RegisterType((*Ping)(nil), "msgpb.Ping")
	proto.RegisterType((*Pong)(nil), "msgpb.Pong")
	proto.RegisterType((*SubRoomRequest)(nil), "msgpb.SubRoomRequest")
	proto.RegisterType((*CommonResponse)(nil), "msgpb.CommonResponse")
	proto.RegisterType((*ClientPayload)(nil), "msgpb.ClientPayload")
	proto.RegisterType((*ServerPayload)(nil), "msgpb.ServerPayload")
	proto.RegisterType((*Message)(nil), "msgpb.Message")
	proto.RegisterType((*MessagesWrapper)(nil), "msgpb.MessagesWrapper")
	proto.RegisterEnum("msgpb.MessageOption", MessageOption_name, MessageOption_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Msg service

type MsgClient interface {
	// 消息传递通道
	LoopV1(ctx context.Context, opts ...grpc.CallOption) (Msg_LoopV1Client, error)
}

type msgClient struct {
	cc *grpc.ClientConn
}

func NewMsgClient(cc *grpc.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) LoopV1(ctx context.Context, opts ...grpc.CallOption) (Msg_LoopV1Client, error) {
	stream, err := grpc.NewClientStream(ctx, &_Msg_serviceDesc.Streams[0], c.cc, "/msgpb.Msg/LoopV1", opts...)
	if err != nil {
		return nil, err
	}
	x := &msgLoopV1Client{stream}
	return x, nil
}

type Msg_LoopV1Client interface {
	Send(*ClientPayload) error
	Recv() (*ServerPayload, error)
	grpc.ClientStream
}

type msgLoopV1Client struct {
	grpc.ClientStream
}

func (x *msgLoopV1Client) Send(m *ClientPayload) error {
	return x.ClientStream.SendMsg(m)
}

func (x *msgLoopV1Client) Recv() (*ServerPayload, error) {
	m := new(ServerPayload)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Msg service

type MsgServer interface {
	// 消息传递通道
	LoopV1(Msg_LoopV1Server) error
}

func RegisterMsgServer(s *grpc.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_LoopV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MsgServer).LoopV1(&msgLoopV1Server{stream})
}

type Msg_LoopV1Server interface {
	Send(*ServerPayload) error
	Recv() (*ClientPayload, error)
	grpc.ServerStream
}

type msgLoopV1Server struct {
	grpc.ServerStream
}

func (x *msgLoopV1Server) Send(m *ServerPayload) error {
	return x.ServerStream.SendMsg(m)
}

func (x *msgLoopV1Server) Recv() (*ClientPayload, error) {
	m := new(ClientPayload)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "msgpb.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LoopV1",
			Handler:       _Msg_LoopV1_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/molon/gomsg/pb/msgpb/msg.proto",
}

func init() { proto.RegisterFile("github.com/molon/gomsg/pb/msgpb/msg.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 588 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x8d, 0x6b, 0x93, 0x84, 0xc9, 0x07, 0x61, 0xd5, 0x42, 0xda, 0x03, 0xb4, 0x3e, 0xa5, 0x08,
	0xd9, 0x10, 0xc4, 0x85, 0x9e, 0xdc, 0x90, 0x2a, 0x11, 0x6d, 0x12, 0x6d, 0x2b, 0x2a, 0x71, 0x89,
	0xec, 0x64, 0x59, 0xa2, 0xc6, 0x3b, 0xae, 0x37, 0x06, 0xe5, 0x97, 0xf0, 0xd7, 0xf8, 0x39, 0x68,
	0xd7, 0x9b, 0x20, 0x97, 0x56, 0xbd, 0x58, 0x3b, 0x33, 0x6f, 0xdf, 0xbc, 0x37, 0xb3, 0x32, 0x1c,
	0xf3, 0xc5, 0xea, 0x47, 0x16, 0x79, 0x33, 0x8c, 0xfd, 0x18, 0x97, 0x28, 0x7c, 0x8e, 0xb1, 0xe4,
	0x7e, 0x12, 0xf9, 0xb1, 0xe4, 0xf9, 0xd7, 0x4b, 0x52, 0x5c, 0x21, 0x79, 0xa2, 0x13, 0x07, 0xfb,
	0x1c, 0x91, 0x2f, 0x99, 0xaf, 0x93, 0x51, 0xf6, 0xdd, 0x0f, 0xc5, 0x3a, 0x47, 0x1c, 0x10, 0x96,
	0xa6, 0x98, 0x26, 0x91, 0x3f, 0xc3, 0x39, 0xcb, 0x73, 0xee, 0x4b, 0xb0, 0x83, 0xd9, 0x0d, 0x69,
	0x81, 0x2d, 0xd9, 0x6d, 0xdb, 0x3a, 0xb4, 0x3a, 0x4f, 0xa9, 0x3a, 0xba, 0x65, 0x70, 0x26, 0x0b,
	0xc1, 0xdd, 0x13, 0x70, 0x26, 0x28, 0x38, 0x39, 0x02, 0x47, 0x5d, 0xd3, 0x90, 0x66, 0xb7, 0xe1,
	0x19, 0x2e, 0xaf, 0x87, 0x73, 0x46, 0x75, 0x49, 0x91, 0xc4, 0x92, 0xb7, 0x77, 0x72, 0x92, 0x58,
	0x72, 0x97, 0x42, 0xf3, 0x32, 0x8b, 0x28, 0x62, 0x4c, 0xd9, 0x6d, 0xc6, 0xe4, 0x8a, 0x10, 0x70,
	0x52, 0xc4, 0xd8, 0x74, 0xd2, 0x67, 0xf2, 0x16, 0xca, 0x49, 0x98, 0x86, 0xb1, 0xd4, 0x57, 0x6b,
	0xdd, 0x5d, 0x2f, 0xf7, 0xe0, 0x6d, 0x3c, 0x78, 0x81, 0x58, 0x53, 0x83, 0x71, 0xaf, 0xa1, 0xd9,
	0xc3, 0x38, 0x46, 0x41, 0x99, 0x4c, 0x50, 0x48, 0xf6, 0xbf, 0xf8, 0xad, 0xd8, 0x9d, 0x47, 0xc5,
	0xda, 0xff, 0xc4, 0xfe, 0xb6, 0xa0, 0xd1, 0x5b, 0x2e, 0x98, 0x58, 0x4d, 0xc2, 0xf5, 0x12, 0xc3,
	0xf9, 0x3d, 0xc4, 0xaf, 0xc0, 0x0e, 0x67, 0x37, 0xed, 0x9a, 0xd6, 0x09, 0x9e, 0x1e, 0xb9, 0x17,
	0xcc, 0x6e, 0x06, 0x25, 0xaa, 0x0a, 0xaa, 0x71, 0xb2, 0x10, 0xbc, 0x5d, 0xd7, 0x80, 0x9a, 0x01,
	0xa8, 0x41, 0x0e, 0x4a, 0x54, 0x97, 0xc8, 0x31, 0xd8, 0x32, 0x8b, 0xda, 0x0d, 0x8d, 0xd8, 0x33,
	0x88, 0xe2, 0x94, 0x14, 0x9b, 0xcc, 0xa2, 0xd3, 0x32, 0x38, 0xa7, 0x38, 0x5f, 0xbb, 0x7f, 0x2c,
	0x68, 0x5c, 0xb2, 0xf4, 0x27, 0x4b, 0x1f, 0x56, 0xb6, 0x0f, 0x55, 0xc1, 0xd8, 0x7c, 0xaa, 0xe4,
	0x29, 0xdb, 0x55, 0x5a, 0x51, 0x71, 0x60, 0x44, 0xa1, 0xe0, 0x46, 0xf5, 0x56, 0x14, 0x1a, 0x51,
	0x6a, 0xbb, 0x27, 0x50, 0x8f, 0x25, 0x97, 0xd3, 0x5f, 0x69, 0x98, 0x24, 0x2c, 0x35, 0xfa, 0x5f,
	0x18, 0xe8, 0x05, 0x93, 0x32, 0xe4, 0x4c, 0x5e, 0xe7, 0xd5, 0x41, 0x89, 0xd6, 0x14, 0xda, 0x84,
	0xa4, 0x0b, 0x55, 0x99, 0x45, 0xd3, 0x94, 0xc9, 0xe4, 0x8e, 0xad, 0xe2, 0xa2, 0x06, 0x25, 0x5a,
	0x91, 0x59, 0xa4, 0xc2, 0xad, 0xb5, 0x0c, 0x2a, 0x86, 0xfd, 0x1e, 0x4f, 0x1e, 0x54, 0x30, 0x59,
	0x2d, 0x50, 0x48, 0xb3, 0xc9, 0xdd, 0xa2, 0xa0, 0xb1, 0x2e, 0xd2, 0x0d, 0x88, 0x74, 0xc0, 0x89,
	0x70, 0xbe, 0xd6, 0x4b, 0x7d, 0xe8, 0x19, 0x69, 0x84, 0xfb, 0x11, 0x9e, 0xdd, 0x31, 0x45, 0x5c,
	0x70, 0x94, 0xa9, 0xb6, 0x75, 0x68, 0x77, 0x6a, 0xdd, 0x66, 0xb1, 0x13, 0xd5, 0xb5, 0x37, 0x13,
	0x68, 0x14, 0x5a, 0x93, 0x2a, 0x38, 0xa3, 0xf1, 0xa8, 0xdf, 0x2a, 0x91, 0x3a, 0x54, 0x47, 0xfd,
	0xfe, 0xe7, 0x69, 0xd0, 0xfb, 0xd2, 0xb2, 0x48, 0x0b, 0xea, 0x3a, 0x1a, 0x9f, 0x9d, 0x9d, 0x0f,
	0x47, 0xfd, 0xd6, 0x0e, 0xd9, 0x83, 0xe7, 0x3a, 0x33, 0x1a, 0x5f, 0x0d, 0xcf, 0x86, 0xbd, 0xe0,
	0x6a, 0x38, 0x1e, 0xb5, 0x9c, 0x6e, 0x00, 0xf6, 0x85, 0xe4, 0xe4, 0x13, 0x94, 0xcf, 0x11, 0x93,
	0xaf, 0xef, 0xc9, 0xc6, 0x62, 0xe1, 0x25, 0x1e, 0x6c, 0xb2, 0x85, 0x57, 0xe0, 0x96, 0x3a, 0xd6,
	0x3b, 0xeb, 0xf4, 0xe8, 0xdb, 0xeb, 0x47, 0xfe, 0x12, 0x51, 0x59, 0x8f, 0xe0, 0xc3, 0xdf, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x6f, 0xad, 0x5a, 0xa0, 0x4f, 0x04, 0x00, 0x00,
}
